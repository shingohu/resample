// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/resample.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class ResampleBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  ResampleBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  ResampleBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int resample_s16(
    ffi.Pointer<ffi.Int16> input,
    ffi.Pointer<ffi.Int16> output,
    int inSampleRate,
    int outSampleRate,
    int inputSize,
    int channels,
  ) {
    return _resample_s16(
      input,
      output,
      inSampleRate,
      outSampleRate,
      inputSize,
      channels,
    );
  }

  late final _resample_s16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<ffi.Int16>, ffi.Pointer<ffi.Int16>,
              ffi.Int, ffi.Int, ffi.Uint64, ffi.Int)>>('resample_s16');
  late final _resample_s16 = _resample_s16Ptr.asFunction<
      int Function(ffi.Pointer<ffi.Int16>, ffi.Pointer<ffi.Int16>, int, int,
          int, int)>();
}

const int FP_DIGITS = 15;

const int FP_FACTOR = 32768;

const int FP_MASK = 32767;

const int MAX_HWORD = 32767;

const int MIN_HWORD = -32768;
